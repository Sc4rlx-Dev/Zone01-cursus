package goreloded

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"
)

// ProcessText applies various transformations to the input text.
func ProcessText(text string) string {
	// Define transformation patterns and handlers
	patterns := map[*regexp.Regexp]func([]string) string{
		// Hexadecimal to decimal conversion
		regexp.MustCompile(`(\b[0-9A-Fa-f]+\b) \(hex\)`): func(parts []string) string {
			hexValue, _ := strconv.ParseInt(parts[1], 16, 64)
			return fmt.Sprintf("%d", hexValue)
		},
		// Binary to decimal conversion
		regexp.MustCompile(`(\b[01]+\b) \(bin\)`): func(parts []string) string {
			binValue, _ := strconv.ParseInt(parts[1], 2, 64)
			return fmt.Sprintf("%d", binValue)
		},
		// Convert to uppercase
		regexp.MustCompile(`(\b\w+\b) \(up\)`): func(parts []string) string {
			return strings.ToUpper(parts[1])
		},
		// Convert to lowercase
		regexp.MustCompile(`(\b\w+\b) \(low\)`): func(parts []string) string {
			return strings.ToLower(parts[1])
		},
		// Capitalize each word
		regexp.MustCompile(`(\b\w+\b) \(cap\)`): func(parts []string) string {
			return strings.Title(parts[1])
		},
		// Convert first N words to uppercase
		regexp.MustCompile(`(\b\w+(?: \w+){0,}) \(up, (\d+)\)`): func(parts []string) string {
			num, _ := strconv.Atoi(parts[2])
			words := strings.Fields(parts[1])
			for i := 0; i < num && i < len(words); i++ {
				words[i] = strings.ToUpper(words[i])
			}
			return strings.Join(words, " ")
		},
		// Convert first N words to lowercase
		regexp.MustCompile(`(\b\w+(?: \w+){0,}) \(low, (\d+)\)`): func(parts []string) string {
			num, _ := strconv.Atoi(parts[2])
			words := strings.Fields(parts[1])
			for i := 0; i < num && i < len(words); i++ {
				words[i] = strings.ToLower(words[i])
			}
			return strings.Join(words, " ")
		},
		// Capitalize first N words
		regexp.MustCompile(`(\b\w+(?: \w+){0,}) \(cap, (\d+)\)`): func(parts []string) string {
			num, _ := strconv.Atoi(parts[2])
			words := strings.Fields(parts[1])
			for i := 0; i < num && i < len(words); i++ {
				words[i] = strings.Title(words[i])
			}
			return strings.Join(words, " ")
		},
	}

	// Apply transformations
	for pattern, handler := range patterns {
		text = pattern.ReplaceAllStringFunc(text, func(s string) string {
			parts := pattern.FindStringSubmatch(s)
			return handler(parts)
		})
	}

	// Normalize spaces around punctuation
	text = regexp.MustCompile(`\s*([.,!?;:])\s*`).ReplaceAllString(text, "$1 ")
	text = strings.ReplaceAll(text, "  ", " ")

	// Handle grouped punctuation like "..." and "!!"
	text = regexp.MustCompile(`\s*([.]{3}|[!?]{2,})\s*`).ReplaceAllStringFunc(text, func(s string) string {
		return strings.TrimSpace(s)
	})

	// Trim spaces inside single quotes
	text = regexp.MustCompile(`'\s*(.*?)\s*'`).ReplaceAllString(text, "'$1'")

	// Replace "a" with "an" before vowel sounds
	text = regexp.MustCompile(`\b(a)\s+([aeiouhAEIOUH])`).ReplaceAllString(text, "an $2")

	return strings.TrimSpace(text)
}


is

Objectives
In this project you will use some of your old functions made in your old repository. You will use them with the objective of making a simple text completion/editing/auto-correction tool.

One more detail. This time the project will be corrected by auditors. The auditors will be other students and you will be an auditor as well.

We advise you to create your own tests for yourself and for when you will correct your auditees.

Introduction
Your project must be written in Go.
The code should respect the good practices.
It is recommended to have test files for unit testing.
The tool you are about to build will receive as arguments the name of a file containing a text that needs some modifications (the input) and the name of the file the modified text should be placed in (the output). Next is a list of possible modifications that your program should execute:

Every instance of (hex) should replace the word before with the decimal version of the word (in this case the word will always be a hexadecimal number). (Ex: "1E (hex) files were added" -> "30 files were added")

Every instance of (bin) should replace the word before with the decimal version of the word (in this case the word will always be a binary number). (Ex: "It has been 10 (bin) years" -> "It has been 2 years")

Every instance of (up) converts the word before with the Uppercase version of it. (Ex: "Ready, set, go (up) !" -> "Ready, set, GO!")

Every instance of (low) converts the word before with the Lowercase version of it. (Ex: "I should stop SHOUTING (low)" -> "I should stop shouting")

Every instance of (cap) converts the word before with the capitalized version of it. (Ex: "Welcome to the Brooklyn bridge (cap)" -> "Welcome to the Brooklyn Bridge")

For (low), (up), (cap) if a number appears next to it, like so: (low, <number>) it turns the previously specified number of words in lowercase, uppercase or capitalized accordingly. (Ex: "This is so exciting (up, 2)" -> "This is SO EXCITING")
Every instance of the punctuations ., ,, !, ?, : and ; should be close to the previous word and with space apart from the next one. (Ex: "I was sitting over there ,and then BAMM !!" -> "I was sitting over there, and then BAMM!!").

Except if there are groups of punctuation like: ... or !?. In this case the program should format the text as in the following example: "I was thinking ... You were right" -> "I was thinking... You were right".
The punctuation mark ' will always be found with another instance of it and they should be placed to the right and left of the word in the middle of them, without any spaces. (Ex: "I am exactly how they describe me: ' awesome '" -> "I am exactly how they describe me: 'awesome'")

If there are more than one word between the two ' ' marks, the program should place the marks next to the corresponding words (Ex: "As Elton John said: ' I am the most well-known homosexual in the world '" -> "As Elton John said: 'I am the most well-known homosexual in the world'")
Every instance of a should be turned into an if the next word begins with a vowel (a, e, i, o, u) or a h. (Ex: "There it was. A amazing rock!" -> "There it was. An amazing rock!").

Allowed packages :

bufio
Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object, creating another object (Reader or Writer) that also implements the interface but provides buffering and some help for textual I/O.
builtin
Package builtin provides documentation for Go's predeclared identifiers.
bytes
Package bytes implements functions for the manipulation of byte slices.
cmp
Package cmp provides types and functions related to comparing ordered values.
compress
container
context
Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.
crypto
Package crypto collects common cryptographic constants.
database
debug
embed
Package embed provides access to files embedded in the running Go program.
encoding
Package encoding defines interfaces shared by other packages that convert data to and from byte-level and textual representations.
errors
Package errors implements functions to manipulate errors.
expvar
Package expvar provides a standardized interface to public variables, such as operation counters in servers.
flag
Package flag implements command-line flag parsing.
fmt
Package fmt implements formatted I/O with functions analogous to C's printf and scanf.
go
hash
Package hash provides interfaces for hash functions.
html
Package html provides functions for escaping and unescaping HTML text.
image
Package image implements a basic 2-D image library.
index
io
Package io provides basic interfaces to I/O primitives.
iter
Package iter provides basic definitions and operations related to iterators over sequences.
log
Package log implements a simple logging package.
maps
Package maps defines various functions useful with maps of any type.
math
Package math provides basic constants and mathematical functions.
mime
Package mime implements parts of the MIME spec.
net
Package net provides a portable interface for network I/O, including TCP/IP, UDP, domain name resolution, and Unix domain sockets.
os
Package os provides a platform-independent interface to operating system functionality.
path
Package path implements utility routines for manipulating slash-separated paths.
plugin
Package plugin implements loading and symbol resolution of Go plugins.
reflect
Package reflect implements run-time reflection, allowing a program to manipulate objects with arbitrary types.
regexp
Package regexp implements regular expression search.
runtime
Package runtime contains operations that interact with Go's runtime system, such as functions to control goroutines.
slices
Package slices defines various functions useful with slices of any type.
sort
Package sort provides primitives for sorting slices and user-defined collections.
strconv
Package strconv implements conversions to and from string representations of basic data types.
strings
Package strings implements simple functions to manipulate UTF-8 encoded strings.
structs
Package structs defines marker types that can be used as struct fields to modify the properties of a struct.
sync
Package sync provides basic synchronization primitives such as mutual exclusion locks.
syscall
Package syscall contains an interface to the low-level operating system primitives.
testing
Package testing provides support for automated testing of Go packages.
text
time
Package time provides functionality for measuring and displaying time.
unicode
Package unicode provides data and functions to test some properties of Unicode code points.
unique
The unique package provides facilities for canonicalizing ("interning") comparable values.
unsafe
Package unsafe contains operations that step around the type safety of Go programs.




my folder structure :
GoreV1 :
    -flags.go
    -go.mod
    -go.sum
    -main :  main.go
            sample.txt
            result.txt

Usage
$ cat sample.txt
it (cap) was the best of times, it was the worst of times (up) , it was the age of wisdom, it was the age of foolishness (cap, 6) , it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of darkness, it was the spring of hope, IT WAS THE (low, 3) winter of despair.
$ go run . sample.txt result.txt
$ cat result.txt
It was the best of times, it was the worst of TIMES, it was the age of wisdom, It Was The Age Of Foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of darkness, it was the spring of hope, it was the winter of despair.
$ cat sample.txt
Simply add 42 (hex) and 10 (bin) and you will see the result is 68.
$ go run . sample.txt result.txt
$ cat result.txt
Simply add 66 and 2 and you will see the result is 68.
$ cat sample.txt
There is no greater agony than bearing a untold story inside you.
$ go run . sample.txt result.txt
$ cat result.txt
There is no greater agony than bearing an untold story inside you.
$ cat sample.txt
Punctuation tests are ... kinda boring ,what do you think ?
$ go run . sample.txt result.txt
$ cat result.txt
Punctuation tests are... kinda boring, what do you think?

